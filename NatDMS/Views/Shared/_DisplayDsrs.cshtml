@model NatDMS.Models.DSRViewModel

@{
    ViewData["Title"] = "DisplayDsrs";
}

<!DOCTYPE html>
<html lang="en">


<head>

    <h1>DisplayDsrs</h1>



    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="~/css/dm-project-style.css">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="~/js/jquery-3.6.0.min.js"></script>


    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>







    <script type="text/javascript">function executivechange() {
            debugger;
            var exid = $('#executive').val();
            if (exid.trim() != '') {
                var ddldis = $('#distributor');
                alert("success")
                ddldis.empty();

                $.ajax(
                    {
                        url: "/Dsr/GetDistributorByExecutiveId",
                        type: 'GET',
                        dataType: 'json',

                        data: { executiveId: exid },

                        success: function (d) {
                            ddldis.append($("<option></option>").val('').html('--Select Distributor--'));
                            $.each(d, function (i, distributors) {
                                ddldis.append($("<option>" + distributors.distributorName + "</option>").val(distributors.id).html(distributors.distributorName));
                            });
                        },
                        error: function () {
                            alert('Error!');
                        }
                    });
            }
        }


        function distributorchange() {
            debugger;
            var disid = $('#distributor').val();
            if (disid.trim() != '') {
                var ddlret = $('#retailor');
                alert("success")
                ddlret.empty();

                $.ajax(
                    {
                        url: "/DSR/GetRetailorByDistributorId",
                        type: 'GET',
                        dataType: 'json',
                        data: { distributorId: disid },
                        success: function (d) {
                            ddlret.append($("<option></option>").val('').html('--Select Retailors--'));
                            $.each(d, function (i, retailors) {

                                ddlret.append($("<option>" + retailors.retailor + "</option>").val(retailors.id).html(retailors.retailor));
                            });
                        },
                        error: function () {
                            alert('Error!');
                        }
                    });
            }
        }











        function Save() {
            debugger;

            var modelData = {
                Executive: $("#executive").val(),
                Retailor: $("#retailor").val(),
                Distributor: $("#distributor").val(),
                StarDate: $("#StarDate").val(),
                EndDate: $("#EndDate").val(),
                //ProductList: []
            };

            //$("#Productlist TBODY TR").each(function () {
            //    var rowData = {
            //        Category: $(this).find("td:eq(0)").text().trim(),
            //        ProductName: $(this).find("td:eq(1)").text().trim(),
            //        Quantity: $(this).find(".quantity").val() || null, // Use null if value is falsy
            //        Price: $(this).find(".price").val() || null, // Use null if value is falsy
            //        Weight: $(this).find("td:eq(4)").text().trim(),
            //        Total: $(this).find("td:eq(5)").text().trim() || null, // Use null if value is falsy
            //        Id: $(this).find("input[type=hidden]").val()
            //    };
            //    modelData.ProductList.push(rowData);
            //});

            // Custom replacer function to include null values
            var jsonString = JSON.stringify(modelData, function (key, value) {
                // Include null values
                return value === undefined ? null : value;
            });

            $.ajax({
                url: "/DSR/DsrSearchProduct",
                type: "POST",
                data: jsonString,
                processData: false,
                contentType: "application/json",
                success: function (response) {
                    let result = JSON.stringify(response);
                    $("#Productlist TBODY").empty();
                    // Append new rows based on the response
                    $.each(response, function (i, ds) {
                        var formattedPrice = parseFloat(ds.price).toFixed(3);
                        var inputField = '<input type="number" name="price" class="form-control price" style="width: 100px" step="0.001" value="' + formattedPrice + '"/>';
                        // Assuming ds is defined and contains the necessary data
                        //var dsId = ds.id; // Get the value of ds.id

                        //// Concatenate ds.id into the URL string
                        //var detailsUrl = "/Details?dsrid=" + dsId;
                        $("#Productlist").append(
                            '<tr>' +
                            '<td>' + ds.executive + '</td>' +
                            '<td>' + ds.distributor + '</td>' +
                            '<td>' + ds.retailor + '</td>' +
                            '<td>' + ds.orderBy + '</td>' +
                            '<td>' + ds.totalAmount + '</td>' +
                            '<td style="text-decoration: none; display: inline-block; color:green;>' + Edit + '</td>' +
                            '<td>' +
                            '<a href="' + detailsUrl + '" style="text-decoration: none; display: inline-block; color:green;">' +
    '<i class="material-icons">info</i>' +
    '</a>' +
    '</td>'+


                            //'<td class="total">' + ds.total + '</td>' +
                            //'<td class="total">' + (ds.TotalAmount !== null ? ds.TotalAmount : '') + '</td>' +
                            '<td style="display:none;">' + ds.id + '</td>' +
                            '</tr>'
                        );
                    });
                },
                error: function (request, status, error) {
                    alert(request.responseText);
                }
            });
        }</script>


</head>

<body>
    <p>

        <a asp-action="Create">Create New</a>
        <a href="@Url.Action("CreateDsr")" class="d-flex align-items-center">
            <i class="material-icons">add</i>
            <b><span style="font-weight:bold;">CREATE NEW</span></b>
        </a>

    </p>



    <script>
    $(document).ready(function () {
        $('#createNewLink').click(function (e) {
            e.preventDefault(); // Prevent default action of link click

            $('#spinner').removeClass('d-none'); // Show the spinner

            // Perform your action (e.g., navigating to the "CreateDsr" page)
            window.location.href = '@Url.Action("CreateDsr")';
        });
    });
    </script>


    <div class="form-group">
        <style>
            .form-group {
                display: flex;
                justify-content: space-between;
            }

                .form-group b {
                    width: 30%;
                    box-sizing: border-box;
                }
        </style>
        <b>
            @Html.LabelFor(model => model.Executive)
            @Html.DropDownListFor(model => model.Executive, new SelectList(Model.ExecutiveList, "Id", "Executive"),
                                               "--Select Executive--", new { @id = "executive", onchange = "executivechange()", @class = "form-select" })
            @*<span asp-validation-for="Executive" class="text-danger"></span>*@
            @Html.HiddenFor(model => model.ExecutiveList, new { id = "executiveListHidden" })

        </b>
        <b>
            @Html.LabelFor(model => model.Distributor)
            @Html.DropDownListFor(model => model.Distributor, new List<SelectListItem>
                                                        {
        new SelectListItem { Text = "", Value = "select" }
        }, new { @id = "distributor", onchange = "distributorchange()", @class = "form-select" })
            @*@Html.ValidationMessageFor(model => model.Distributor, "", new { @class = "text-danger" })*@
        </b>
        <b>
            @Html.LabelFor(model => model.Retailor)
            @Html.DropDownListFor(model => model.Retailor, new List<SelectListItem>
                                                        {
        new SelectListItem { Text = "", Value = "select" }
        }, new { @id = "retailor", @class = "form-select" })
            @*  @Html.ValidationMessageFor(model => model.Retailor, "", new { @class = "text-danger" }) *@
        </b>


        <b>
            @Html.LabelFor(model => model.StartDate)
            @Html.EditorFor(model => model.StartDate, new { @class = "datepicker", @id = "StarDate" })
            @*@Html.EditorFor(model => model.StarDate, new { @class = "datepicker", @Value = DateTime.Now.ToString("12/12/2022") })*@
            @*<input type="text" id="StartDate" name="StartDate" class="datepicker" value="@DateTime.Now.ToString("MM/dd/yyyy")">*@
            @*<input type="text" id="StartDate" name="StartDate" class="datepicker" value="@Model.StarDate.ToString("MM/dd/yyyy")">*@

            @Html.LabelFor(model => model.EndDate)
            @Html.EditorFor(model => model.EndDate, new { @class = "datepicker", @id = "EndDate" })



            @*<script>
                    $('.datepicker').datepicker({
                        format: 'mm/dd/yyyy',
                        todayHighlight: true,
                        autoclose: true,
                        defaultViewDate: { year: new Date().getFullYear(), month: new Date().getMonth(), day: new Date().getDate() }
                    });
                </script>*@
            @*<script>$(document).ready(function () {
                $('#datepicker').datepicker({
                    format: 'mm/dd/yyyy',
                    startDate: '01/01/2000', // Set the start date
                    endDate: '12/31/2050', // Set desired date format
                    changemonth: true,
                    chanheyear: true
                    defaultViewDate: new Date()

                    //autoclose: true        // Close the datepicker when date is selected
                });
            });</script>*@
        </b>
        <div class="col-md-2">
            <div class="form-group">
                <button type="submit" class="btn btn-secondary my-4" onclick="Save()">
                    <i class="material-icons" style="font-size:20px;display:flex;justify-content:center;
                                  align-items:center;">search</i>
                </button>

            </div>
        </div>
    </div>

  

    <table class="table" id="Productlist">
        <thead>
            <tr>

                <th>Executive</th>
                <th>Distributor</th>
                <th>Retailor</th>
                <th>OrderBy</th>

                <th>TotalAmount</th>
                <th>Edit</th>
                <th>Details</th>
                <th>Delete</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.dsr)
            {
                <tr>
                    @*<td>
            @Html.DisplayFor(modelItem => item.Id)
        </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.Executive, new { @id = "executive" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Distributor, new { @id = "distributor" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Retailor, new { @id = "distributor" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderBy, new { @id = "orderBy" })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalAmount, new { @id = "totalAmount" })
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ @id = "edit" }) |
                    </td>
                    <td>
                        <a href="@Url.Action("Details", new { dsrid = item.Id })" style="text-decoration: none; display: inline-block; color:green;">
                            <i class="material-icons">info</i>
                        </a> |
                    </td>
                    <td>
                        @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                    </td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>
