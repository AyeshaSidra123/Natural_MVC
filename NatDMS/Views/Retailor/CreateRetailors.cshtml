@model NatDMS.Models.SaveRetailorViewModel

@{
    ViewData["Title"] = "CreateRetailors";
}
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">



@using (Html.BeginForm("CreateRetailors", "Retailor", FormMethod.Post, new { @class = "needs-validation", novalidate = "true" }))
{
    <h2 align="center">CREATE RETAILOR</h2>
    <div class="row justify-content-center">
        <div class="col-md-3">


           

                    <div class="form-group" style="margin-bottom: 9%;">
                        <b>
                            @Html.LabelFor(model => model.FirstName)
                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </b>
                    </div>

                    <div class="form-group">
                        <b>
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </b>
                    </div>

                    <div class="form-group">
                        <b>

                            @Html.LabelFor(model => model.MobileNumber)
                            @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })

                        </b>
                    </div>
                   
                    <div class="form-group">
                        <b>
                            @Html.LabelFor(model => model.City)
                            @Html.DropDownListFor(model => model.City, new SelectList(new List<SelectListItem>
                        {
                        new SelectListItem { Text = "", Value = "select" },
                        }, "Value", "Text"), new { @id = "city", @onchange = "citychange()", @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </b>
                    </div>

                </div>


                <div class="col-md-3 style=">

                    <div class="form-group">
                        <b>
                            @Html.LabelFor(model => model.LastName)
                            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </b>
                    </div>
                    <div class="form-group emphasized-section">
                        <b>
                            @Html.LabelFor(model => model.Address)
                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", style = "overflow-y:scroll;" })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

                        </b>
                    </div>
                    

                    <div class="form-group">
                        <b>
                            @Html.LabelFor(model => model.State)
                            @Html.DropDownListFor(model => model.State, new SelectList(Model.States, "Id", "StateName"),
                        "--Select State--", new { @id = "state", onchange = "statechange()", @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                        </b>
                    </div>



                    <div class="form-group">
                        <b>
                            @Html.LabelFor(model => model.Area)
                            @Html.DropDownListFor(model => model.Area, new List<SelectListItem>
                        {
                        new SelectListItem { Text = "", Value = "select" }
                        }, new { id = "area", @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
                        </b>
                    </div>

                </div>
            </div>


    <div class="text-center">
        <button type="submit" class="btn-style1">SUBMIT</button>
    </div>

}

<div class="row">
    <div class="col-md-10 d-flex justify-content-between">
        <a href="@Url.Action("CreateRetailors")" class="d-flex align-items-center mr-6">
            <i class="material-icons" style="font-size: 50px;">refresh</i>
        </a>



        <a href="@Url.Action("DisplayRetailors")" class="d-flex align-items-center">
            <i class="material-icons" style="font-size: 50px;">arrow_back</i>
        </a>
    </div>
</div>




<!------------------------- AJAX CODE FOR STATE---------------------------->


<script src="~/js/jquery-3.6.0.min.js"></script>

<script type="text/javascript">
    function statechange() {
        debugger;
        var stid = $('#state').val();
        if (stid.trim() != '') {
            var ddlcity = $('#city');
            ddlcity.empty();

            $.ajax(
                {
                    url: "/Retailor/cityData",

                    type: 'GET',
                    dataType: 'json',
                    data: { Id: stid },

                    success: function (d) {

                        ddlcity.append($("<option></option>").val('').html('SelectCity'));
                        $.each(d, function (i, cities) {

                            ddlcity.append($("<option>" + cities.cityName + "</option>").val(cities.id).html(cities.cityName));

                        });
                    },
                    error: function () {
                        alert('Error!');
                    }
                });
        }

    }





    function citychange() {
        debugger;
        var stid = $('#city').val();
        if (stid.trim() != '') {
            var ddlarea = $('#area');
            ddlarea.empty();

            $.ajax(
                {
                    url: "/Retailor/GetArea",

                    type: 'GET',
                    dataType: 'json',
                    data: { Id: stid },

                    success: function (d) {

                        ddlarea.append($("<option></option>").val('').html('SelectArea'));
                        $.each(d, function (i, areas) {

                            ddlarea.append($("<option>" + areas.areaName + "</option>").val(areas.id).html(areas.areaName));

                        });
                    },
                    error: function () {
                        alert('Error!');
                    }
                });
        }

    }



 </script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}